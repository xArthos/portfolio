# interface User {
#     _id: string
#     name: {
#         firstName: string
#         secondName: string
#         lastName: string
#         fullName: string
#     }
#     nickname: string
#     type: string
#     email: {
#         currentEmail: string
#         isVerified: boolean
#         oldEmails: string[]
#     }
#     avatar: {
#         source: string
#         blockAvatar: {
#             color: string
#         }
#     }
# }

type Query {
    user(_id: ObjectId!): User!
    currentUser: User
}

type Mutation {
    signUp(name: UserNameInput!, password: Password!, email: Email!, nickname: String!): String!
    logIn(password: Password!, email: Email!): String!
}

# Types
type User {
    _id: ObjectId!
    name: UserName!
    nickname: String!
    type: String!
    email: UserEmail!
    avatar: UserAvatar!
    createdAt: Int!
}

type UserName {
    firstName: String!
    secondName: String
    lastName: String!
    fullName: String!
}

type UserEmail {
    current: Email!
    isVerified: Boolean!
    oldEmails: [Email]!
}

type UserAvatar {
    source: String
    blockAvatar: BlockAvatar
}

type BlockAvatar {
    color: String
}

# Inputs
input UserInput {
    name: UserNameInput!
    nickname: String!
    password: Password!
    email: Email!
    avatar: UserAvatarInput
}

input UserNameInput {
    firstName: String!
    secondName: String
    lastName: String!
}

input UserAvatarInput {
    source: String
}